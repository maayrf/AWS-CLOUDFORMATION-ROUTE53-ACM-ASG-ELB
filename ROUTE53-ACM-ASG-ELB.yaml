---
Parameters:
  KeyName:
    Description: coloque o nome da chave para a EC2, lembre-se de criar a chave com o mesmo nome
    Type: AWS::EC2::KeyPair::KeyName

Resources:
  ###Template da EC2 para ASG###
  myLaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties: 
      LaunchTemplateName: Templatizinho
      LaunchTemplateData: 
        ImageId: ami-02354e95b39ca8dec
        InstanceType: t2.micro
        KeyName: !Ref KeyName
        Monitoring: 
          Enabled: true
        NetworkInterfaces:
            - DeviceIndex: 0
              DeleteOnTermination: true
              SubnetId: subnet-085fa989903f00de8 #Usar o id da subnet da sua VPC
              Groups:
              - sg-0129b9b23de74bd16 #Usar o ID SecurityGroup que você criou 
              AssociatePublicIpAddress: true
        UserData:
          Fn::Base64: !Sub |
            #!/bin/bash
            sudo su
            yum update -y
            yum install httpd -y
            systemctl start httpd
            chkconfig httpd on
            echo "<html><body><h1>Bem Vindo ao site!</h1>" > /var/www/html/index.html
            echo "</body></html>" >> /var/www/html/index.html
            amazon-linux-extras install epel
            yum install -y stress
            stress --cpu 100
        EbsOptimized: false
  
  ###Auto Scaling###
  myASG:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AutoScalingGroupName: myASG
      MinSize: "1"
      MaxSize: "5"
      DesiredCapacity: "2"
      HealthCheckGracePeriod: 300
      TargetGroupARNs:
        - Ref: "EC2TargetGroup"
      LaunchTemplate:
        LaunchTemplateId: !Ref myLaunchTemplate
        Version: !GetAtt myLaunchTemplate.LatestVersionNumber
      VPCZoneIdentifier:
        - subnet-085fa989903f00de8 #AZ-E
        - subnet-0ef5eefd40e45b045 #AZ-F
  
  ###Target Group###
  EC2TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: EC2TargetGroup
      Port: 80
      Protocol: HTTP
      VpcId: vpc-0ce445ef701242828
  ###ELB (ALB)###
  ALBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      ###ACESSO ACM###
      Certificates:
        - CertificateArn: "arn:aws:acm:us-east-1:583004540853:certificate/5ba0c808-08c3-4a78-903b-362ff7cc18ea"
      DefaultActions:
        - Type: forward #ou fixed-response, ou redirect
          TargetGroupArn: !Ref EC2TargetGroup
      LoadBalancerArn: !Ref ApplicationLoadBalancer
      Port: 443 #80
      Protocol: HTTPS #HTTP

  ApplicationLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: your-lb-name
      Type: application
      IpAddressType: ipv4 # Valid values are: dualstack, ipv4. 'dualstack' means IPv4 and IPv4. 
      Scheme: internet-facing # or internal
      Subnets:
      - subnet-085fa989903f00de8
      - subnet-0ef5eefd40e45b045
      SecurityGroups:
      - sg-0129b9b23de74bd16
  
  ###ROUTE53###
  myDNS:
    Type: AWS::Route53::RecordSetGroup
    Properties:
      HostedZoneName: cloudsoluctions.com.
      RecordSets:
      - Name: elb.cloudsoluctions.com. ##O certificado criado no acm esta exatamente assim, sem o ponto no final.
        Type: A
        AliasTarget:
          EvaluateTargetHealth: 'true'
          HostedZoneId: !GetAtt 'ApplicationLoadBalancer.CanonicalHostedZoneID'
          DNSName: !GetAtt 'ApplicationLoadBalancer.DNSName'

  ###ACM###
  ###Fazer certificado na console e vinculá-lo ao ELB